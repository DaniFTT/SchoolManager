@page "/classstudents/{classId}"
@using SchoolManager.WebUI.Models.SchoolClasses;
@using SchoolManager.WebUI.Models.Students;
@using System.Text.Json;
@using System.Text.Json.Serialization;
@using SchoolManager.WebUI.Pages.SchoolClasses.Dialogs;
@using static SchoolManager.WebUI.Pages.SchoolClasses.Dialogs.AddStudentToClassDialog;
@inject HttpClient Http
@inject IDialogService DialogService
@inject NavigationManager NavigationManager


<MudFab Color="Color.Tertiary" StartIcon="@Icons.Material.Filled.ArrowBack" DisableElevation="true" Style="float: right; margin-bottom: 35px;" @onclick="GoBackToSchoolClasses" Size="Size.Small" />
<br />

<MudText Typo="Typo.h3" GutterBottom="true">
    Alunos da Turma @schoolClass?.ClassName
</MudText>
<MudText Class="mb-8">Aqui você poderá ver a listagem de todas as Turmas cadastrados, e realizar operações.</MudText>


<MudTable Items="students" Hover="true" SortLabel="Sort By" Elevation="0" Loading="@_loading" Filter="new Func<StudentViewModel, bool>(FilterFunc)">
    <ToolBarContent>
        <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" Color="Color.Primary" Style="float: left" @onclick="AddStudentToClass">Adicionar Aluno</MudButton>

        <MudSpacer />
        <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh Style="width: 35%"><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<StudentViewModel, object>(x=>x.Name!)">Nome</MudTableSortLabel></MudTh>
        <MudTh Style="width: 35%"><MudTableSortLabel SortBy="new Func<StudentViewModel, object>(x=>x.User!)">Usuário</MudTableSortLabel></MudTh>
        <MudTh></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Nome">@context.Name</MudTd>
        <MudTd DataLabel="Usuário">@context.User</MudTd>
        <MudTd Style="text-align: end;">
            <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Delete" Color="Color.Error" @onclick="() => RemoveStudentFromClass(context.Id)">Remover Aluno</MudButton>
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager PageSizeOptions="new int[]{5, 10, 25, 50}" />
    </PagerContent>
</MudTable>


@code {
    [Parameter]
    public string? classId { get; set; }
    public SchoolClassViewModel? schoolClass { get; set; }

    private bool _loading = false;
    private List<StudentViewModel>? students = new();
    private string searchString = "";

    protected override async Task OnInitializedAsync()
    {
        _loading = true;
        var result = await Http.GetAsync($"schoolclass/{classId}");
        if (!result.IsSuccessStatusCode)
        {
            NavigationManager.NavigateTo($"/notfound");
            return;
        }

        schoolClass = await result.Content.ReadFromJsonAsync<SchoolClassViewModel>();

        students = await Http.GetFromJsonAsync<List<StudentViewModel>>($"student/studentbyclass/{classId}");
        _loading = false;
    }

    private bool FilterFunc(StudentViewModel element) => FilterFunc(element, searchString);

    private bool FilterFunc(StudentViewModel element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Name!.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.User!.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ($"{element.Name} {element.User}".Contains(searchString))
            return true;
        return false;
    }

    public DialogOptions GetDialogOptions()
    {
        return new DialogOptions() { MaxWidth = MaxWidth.Small, FullWidth = true };
    }

    private async Task AddStudentToClass()
    {
        var parameters = new DialogParameters();

        var possibleStudents = (await Http.GetFromJsonAsync<List<StudentViewModel>>($"student/"))!;
        possibleStudents.RemoveAll(a => students!.Exists(s => s.Id == a.Id));

        parameters.Add("StudentToClass", new StudentToClassModel(classId!));
        parameters.Add("Students", possibleStudents);

        var dialogResult = await DialogService.Show<AddStudentToClassDialog>("Adicionar Aluno", parameters, GetDialogOptions()).Result;
        if (dialogResult.Cancelled)
            return;

        var addedStudentId = (string?)dialogResult.Data;
        var student = possibleStudents.FirstOrDefault(a => a.Id == int.Parse(addedStudentId!));
        if (student is null) return;

        students!.Insert(0, student!);
    }

    private async Task RemoveStudentFromClass(int studentId)
    {
        var parameters = new DialogParameters();
        parameters.Add("ContentText", "Tem certeza de que deseja remover esse aluno da Turma?");
        parameters.Add("SecondaryText", "Essa ação não pode ser desfeita.");
        parameters.Add("ButtonText", "Deletar");
        parameters.Add("Color", Color.Error);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        var dialogResult = await DialogService.Show<DeleteRegisterDialog>("Deletar", parameters, options).Result;

        if (dialogResult.Cancelled)
            return;

        await Http.DeleteAsync($"schoolclass/{classId}/removestudent/{studentId}");
        students!.RemoveAll(student => student.Id == studentId);
    }

    private void GoBackToSchoolClasses()
    {
        NavigationManager.NavigateTo($"/schoolclasses");
    }

}
