@page "/students"
@using SchoolManager.WebUI.Models.Students;
@using SchoolManager.WebUI.Pages.Students.Dialogs;
@using System.Text.Json;
@using System.Text.Json.Serialization;
@inject HttpClient Http
@inject IDialogService DialogService

<PageTitle>Alunos</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">Alunos</MudText>
<MudText Class="mb-8">Aqui você poderá ver a listagem de todos os alunos cadastrados, e realizar operações.</MudText>


<MudTable Items="students" Hover="true" SortLabel="Sort By" Elevation="0" Loading="@_loading" Filter="new Func<StudentViewModel, bool>(FilterFunc)">
    <ToolBarContent>
        <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" Color="Color.Primary" Style="float: left" @onclick="CreateStudent">Cadastrar Aluno</MudButton>

        <MudSpacer />
        <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh Style="width: 35%"><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<StudentViewModel, object>(x=>x.Name!)">Nome</MudTableSortLabel></MudTh>
        <MudTh Style="width: 35%"><MudTableSortLabel SortBy="new Func<StudentViewModel, object>(x=>x.User!)">Usuário</MudTableSortLabel></MudTh>
        <MudTh></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Nome">@context.Name</MudTd>
        <MudTd DataLabel="Usuário">@context.User</MudTd>
        <MudTd Style="text-align: end;">
            <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Edit" Color="Color.Warning" Style="margin-right: 5px" @onclick="() => UpdateStudent(context.Id)">Editar</MudButton>
            <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Delete" Color="Color.Error" @onclick="() => DeleteStudent(context.Id)">Deletar</MudButton>
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager PageSizeOptions="new int[]{5, 10, 25, 50}" />
    </PagerContent>
</MudTable>


@code {
    private bool _loading = false;
    private List<StudentViewModel>? students = new();
    private string searchString = "";

    protected override async Task OnInitializedAsync()
    {
        _loading = true;
        students = await Http.GetFromJsonAsync<List<StudentViewModel>>("student/");
        _loading = false;
    }

    private bool FilterFunc(StudentViewModel element) => FilterFunc(element, searchString);

    private bool FilterFunc(StudentViewModel element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Name!.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.User!.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ($"{element.Name} {element.User}".Contains(searchString))
            return true;
        return false;
    }

    public DialogOptions GetDialogOptions()
    {
        return new DialogOptions() { MaxWidth = MaxWidth.Small, FullWidth = true };
    }

    private async Task CreateStudent()
    {
        var parameters = new DialogParameters();
        parameters.Add("student", new StudentViewModel());
        parameters.Add("isUpdate", false);

        var dialogResult = await DialogService.Show<AddOrUpdateStudentDialog>("Cadastrar Aluno", GetDialogOptions()).Result;
        if (dialogResult.Data == null)
            return;

        var createdStudent = dialogResult.Data as StudentViewModel;
        students!.Insert(0, createdStudent!);
    }

    private async Task UpdateStudent(int studentId)
    {
        var student = (students!.FirstOrDefault(student => student.Id == studentId))!;

        student.Password = string.Empty;

        var parameters = new DialogParameters();
        parameters.Add("student", student);
        parameters.Add("isUpdate", true);

        var dialogResult = await DialogService.Show<AddOrUpdateStudentDialog>("Atualizar Aluno", parameters, GetDialogOptions()).Result;
        if (dialogResult.Data == null)
            return;

        var updatedStudent = dialogResult.Data as StudentViewModel;

        students!.Remove(student);
        students!.Insert(0, updatedStudent!);
    }

    private async Task DeleteStudent(int studentId)
    {
        var parameters = new DialogParameters();
        parameters.Add("ContentText", "Tem certeza de que deseja excluir esse aluno?");
        parameters.Add("SecondaryText", "Essa ação não pode ser desfeita.");
        parameters.Add("ButtonText", "Deletar");
        parameters.Add("Color", Color.Error);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        var dialogResult = await DialogService.Show<DeleteRegisterDialog>("Deletar", parameters, options).Result;

        if (dialogResult.Cancelled)
            return;

        await Http.DeleteAsync($"student/{studentId}");
        students!.RemoveAll(student => student.Id == studentId);        
    }
}
